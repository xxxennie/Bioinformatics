''' 
Code Challenge: Solve the Eulerian Path Problem.

Input: The adjacency list of a directed graph that has an Eulerian path.
Output: An Eulerian path in this graph.

Sample Input:

0: 2
1: 3
2: 1
3: 0 4
6: 3 7
7: 8
8: 9
9: 6
Sample Output:

6 7 8 9 6 3 0 2 1 3 4
'''


import random

#creating graph from the file

file_path = '/Users/xxennie/Downloads/dataset_30187_6.txt'
ad_lst = {}

def reading_file(file_path):
    ad_lst = {}
    with open(file_path, 'r') as f:
        file = f.read().split('\n')
        for i in file:
            key, path = i.split(': ')
            ad_lst[key] = list(path.strip().split(' '))
    return ad_lst


#finding the first and the last nodes in the graph

def Finding_StartEnd(ad_lst):
    start = None
    end = None
    values = []
    for i in ad_lst.values():
        values+= i
    for i in values:
        if i not in ad_lst.keys():
            start = i
    for key, lst in ad_lst.items():
        if len(lst) > values.count(key):
            end = key
        elif len(lst) < values.count(key):
            start = key
    try:
        ad_lst[start] += [end]
    except:
        ad_lst[start] = [end]
    return ad_lst, end, start
        
# finding cycle (end connected with start in the output of this function)

def EulerianCycleProblem(ad_lst, start):
    visited = [start]
    node = start
    #counting edges
    graph_len = 0
    for i in ad_lst.values():
        graph_len += len(i)
    print(graph_len)
    
    while len(visited) != graph_len:
        try:
            next_node = ad_lst[node][0]
        except:
            n_node = random.randint(0, len(visited) - 1)
            node = visited[n_node]
            while node not in ad_lst.keys():
                n_node = random.randint(0, len(visited) - 1)
                node = visited[n_node]
            if visited[0] == visited[-1]:
                visited.pop()
            
            visited = visited[n_node:] + visited[:n_node + 1]
            next_node = ad_lst[node][0]
        if len(ad_lst[node]) == 1:
            del ad_lst[node]
        else:
            ad_lst[node].pop(0)

        visited.append(next_node)
        node = next_node
        if len(ad_lst.keys()) == 0:
            break
    return visited

#this function deletes the connection between end and start and creates final version of the path

def reversing(path, start, end):
    for i in range(len(result)- 1):
        if result[i] == end and result[i + 1] == start:
            print(start,end)
            end_index = i
            break
    
    path = path[end_index+1:] + path[:end_index+1]
    return path

    
data = reading_file(file_path)
cycled_data, start, end = Finding_StartEnd(data)
result_with_extra_path = EulerianCycleProblem(data, start)
result = reversing(result, start, end)
print(*result)
